{"version":3,"sources":["components/ShowMovieDetails.js","components/Movie.js","serviceWorker.js","index.js"],"names":["ShowMovieDetails","props","onimgClick","console","log","state","click","setState","response","movieDet","bind","nextProps","nextState","timeLog","this","Title","featureArray","length","prevProps","prevState","Poster","className","onClick","src","alt","map","arr","i","key","Component","Movie","onType","event","preventDefault","value","target","checkBox","a","checkarr","rend","count","checked","push","filter","s","status","comment","checkBoxState","handleSubmit","url","movie","fetch","json","rjson","Response","Fragment","onSubmit","type","onChange","id","name","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57987511.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class ShowMovieDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            click : false,\r\n            response : this.props.movieDet\r\n        }\r\n        this.onimgClick = this.onimgClick.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Component did mount!\");\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        console.log(\"Component will receive props\", nextProps,state);\r\n        if(state.response.Title === nextProps.movieDet.Title) {\r\n            console.log(false)\r\n            return null\r\n        } else if (state.response.Title !== nextProps.movieDet.Title) {\r\n            console.log(\"change in title\", state.response.Title,nextProps.movieDet.Title)\r\n            return {\r\n                click : false,\r\n                response : nextProps.movieDet\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps,nextState) {\r\n        console.timeLog(\"should Component Update\",nextProps,nextState)\r\n        if(this.state.response.Title === nextProps.movieDet.Title && this.state.click === nextState.click && this.props.featureArray.length === nextProps.featureArray.length ) {\r\n            // console.log(false)\r\n            return false\r\n        }\r\n            \r\n        return true\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"Component did update\", prevProps, prevState);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"Component will unmount\");\r\n    }\r\n\r\n    onimgClick = () => {\r\n        console.log(\"click\",this.state.click)\r\n        this.setState({\r\n            click : !this.state.click\r\n        })\r\n        console.log(\"click\",this.state.click)\r\n    }\r\n    \r\n    render() {\r\n        \r\n        console.log(this.props.movieDet.Poster)\r\n        return (\r\n            <div className=\"MovieDetails\">\r\n\r\n                <div className=\"poster\">               \r\n                <img onClick={this.onimgClick} className=\"image\" src={this.props.movieDet.Poster} alt=\"poster\" />\r\n                </div>\r\n                {this.state.click &&\r\n                <div className=\"Details\">\r\n                    <ul>\r\n                    {this.props.featureArray.map((arr,i) => {\r\n                        return <li key={i}><b>{arr} : </b><i>{this.props.movieDet[arr]}</i></li>\r\n                    } )}\r\n                    </ul>\r\n\r\n                {/* <ul>\r\n                    <li><b>Title : </b><i>{this.props.movieDet.Title}</i></li>\r\n                    <li><b>Year : </b><i>{this.props.movieDet.Year}</i></li>\r\n                    <li><b>Genre : </b><i>{this.props.movieDet.Genre}</i></li>\r\n                    <li><b>IMDB: </b><i>{this.props.movieDet.imdbRating}</i></li>\r\n                    <li><b>Cast : </b><i>{this.props.movieDet.Actors}</i></li>\r\n                    <li><b>Plot : </b><i>{this.props.movieDet.Plot}</i></li>\r\n                </ul> */}\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import ShowMovieDetails from './ShowMovieDetails'\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Movie extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            value : '',\r\n            status : false,\r\n            response : {},\r\n            comment : false,\r\n            checkarr : [],\r\n            checkBoxState: []\r\n            // checkarr : [\"Title\",\"Year\",\"Genre\",\"imdbRating\",\"Actors\",\"Plot\"]\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"component Did Update Parent\")\r\n\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const url = \"https://www.omdbapi.com/?i=tt3896198&apikey=41425427&t=\"\r\n        const movie = this.state.value\r\n        console.log(url+movie)\r\n        const a = await fetch(url+movie)\r\n        // console.log(a)\r\n        const rjson = await a.json()\r\n        // console.log(rjson)\r\n        console.log(rjson.Response)\r\n        if (rjson.Response === \"True\"){\r\n            this.setState({\r\n                status : true,\r\n                response : rjson,\r\n                comment : false,\r\n                // value : ''\r\n            })            \r\n        } else if (rjson.Response === \"False\") {\r\n            this.setState({\r\n                status : false,\r\n                comment : true\r\n            })\r\n        }\r\n    \r\n    }\r\n\r\n    onType = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event.target.value)\r\n        // console.log(this)\r\n        this.setState({\r\n            value : event.target.value\r\n        })\r\n    }\r\n\r\n    checkBox = (event) => {\r\n        let a = [...this.state.checkarr]\r\n        let rend = false\r\n        let count = 0\r\n        console.log(a)\r\n        console.log(event.target.value)\r\n        if(event.target.checked === true) {\r\n            a.push(event.target.value)\r\n            console.log(a)\r\n        }else if(event.target.checked === false) {\r\n            a= a.filter((s) => { return (s !== event.target.value)})\r\n            console.log(a)\r\n        }\r\n        \r\n        if(this.state.checkarr.length !== a.length) {\r\n            rend = true\r\n        } else if(this.state.checkarr.length === a.length) {\r\n            for(let i=0 ; i<this.state.checkarr.length; i++) {\r\n                if(a[i] === this.state.checkarr[i]){\r\n                    count = count + 1\r\n                }else {\r\n                    count = count - 1\r\n                }\r\n            }\r\n            if (count === a.length){\r\n                rend = false\r\n            } else { rend = true}\r\n        }\r\n\r\n        if(rend === true){\r\n            this.setState({\r\n                checkarr: a\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    render() {\r\n        \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"header\">\r\n                \r\n                    <div className='heading'>\r\n                    <h3>Movie Search</h3>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"form\" >\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div className='search_bar'>\r\n                <label>Movie Name : </label>\r\n                <input type='text' className='search' onChange={this.onType} value={this.state.value} ></input>\r\n                </div>\r\n\r\n                <div className=\"checkboxes\">\r\n                <input type=\"checkbox\" id=\"Title\" onChange={this.checkBox} name=\"box1\" value=\"Title\"/>\r\n                <label htmlFor=\"Title\">Title</label>\r\n                <input type=\"checkbox\" id=\"Year\" onChange={this.checkBox} name=\"box1\" value=\"Year\"/>\r\n                <label htmlFor=\"Year\">Year</label>\r\n                <input type=\"checkbox\" id=\"Genre\" onChange={this.checkBox} name=\"box1\" value=\"Genre\"/>\r\n                <label htmlFor=\"Genre\">Genre</label>\r\n                <input type=\"checkbox\" id=\"imdbRating\" onChange={this.checkBox} name=\"box1\" value=\"imdbRating\"/>\r\n                <label htmlFor=\"imdbRating\">IMDB</label>\r\n                <input type=\"checkbox\" id=\"Actors\" onChange={this.checkBox} name=\"box1\" value=\"Actors\"/>\r\n                <label htmlFor=\"Actors\">Actors</label>\r\n                <input type=\"checkbox\" id=\"Plot\" onChange={this.checkBox} name=\"box1\" value=\"Plot\"/>\r\n                <label htmlFor=\"Plot\">Plot</label>\r\n                </div>\r\n\r\n                <button type='submit'>Search</button>\r\n                </form>\r\n                </div>\r\n                {this.state.status ? <ShowMovieDetails \r\n                featureArray = {this.state.checkarr}\r\n                movieDet ={this.state.response} \r\n                /> : ''}\r\n                {this.state.comment ? \"Check the Name Once again !!! \" : ''}\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Movie from './components/Movie'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Movie/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}