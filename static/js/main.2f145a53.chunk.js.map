{"version":3,"sources":["components/ShowMovieDetails.js","components/Movie.js","serviceWorker.js","index.js"],"names":["ShowMovieDetails","props","onimgClick","console","log","state","click","setState","onclickImg","response","movieDet","bind","prevProps","prevState","a","pic_url","this","Poster","className","onClick","src","alt","Title","Year","Genre","imdbRating","Actors","Plot","nextProps","Component","Movie","onType","event","preventDefault","value","target","status","comment","handleSubmit","url","movie","fetch","json","rjson","Response","Fragment","onSubmit","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f145a53.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class ShowMovieDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            click : this.props.onclickImg,\r\n            response : this.props.movieDet\r\n        }\r\n        this.onimgClick = this.onimgClick.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Component did mount!\");\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        console.log(\"Component will receive props\", nextProps,state);\r\n        if(state.response.Title === nextProps.movieDet.Title) {\r\n            console.log(false)\r\n            return null\r\n        } else if (state.response.Title !== nextProps.movieDet.Title) {\r\n            console.log(\"change in title\", state.response.Title,nextProps.movieDet.Title)\r\n            return {\r\n                click : nextProps.onclickImg,\r\n                response : nextProps.movieDet\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"Component did update\", prevProps, prevState);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"Component will unmount\");\r\n    }\r\n\r\n    onimgClick = () => {\r\n        console.log(this.state.click)\r\n        this.setState({\r\n            click : !this.state.click\r\n        })\r\n        console.log(this.state.click)\r\n    }\r\n    \r\n    render() {\r\n        // console.log(this.props.movieDet.Title)\r\n        // console.log(this.props.movieDet.Poster)\r\n        \r\n        const a = { pic_url : this.props.movieDet.Poster}\r\n        console.log(a.pic_url)\r\n        return (\r\n            <div className=\"MovieDetails\">\r\n\r\n                <div className=\"poster\">               \r\n                <img onClick={this.onimgClick} className=\"image\" src={a.pic_url} alt=\"poster\" />\r\n                </div>\r\n                {this.state.click &&\r\n                <div className=\"Details\">\r\n                <ul>\r\n                    <li><b>Title : </b><i>{this.props.movieDet.Title}</i></li>\r\n                    <li><b>Year : </b><i>{this.props.movieDet.Year}</i></li>\r\n                    <li><b>Genre : </b><i>{this.props.movieDet.Genre}</i></li>\r\n                    <li><b>IMDB: </b><i>{this.props.movieDet.imdbRating}</i></li>\r\n                    <li><b>Cast : </b><i>{this.props.movieDet.Actors}</i></li>\r\n                    <li><b>Plot : </b><i>{this.props.movieDet.Plot}</i></li>\r\n                </ul>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import ShowMovieDetails from './ShowMovieDetails'\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Movie extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            value : '',\r\n            status : false,\r\n            response : {},\r\n            comment : false\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    // componentDidUpdate() {\r\n    //     const url = \"http://www.omdbapi.com/?i=tt3896198&apikey=41425427&\"\r\n\r\n    // }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const url = \"https://www.omdbapi.com/?i=tt3896198&apikey=41425427&t=\"\r\n        const movie = this.state.value\r\n        console.log(url+movie)\r\n        const a = await fetch(url+movie)\r\n        // console.log(a)\r\n        const rjson = await a.json()\r\n        // console.log(rjson)\r\n        console.log(rjson.Response)\r\n        if (rjson.Response === \"True\"){\r\n            this.setState({\r\n                status : true,\r\n                response : rjson,\r\n                comment : false,\r\n                value : ''\r\n            })            \r\n        } else if (rjson.Response === \"False\") {\r\n            this.setState({\r\n                status : false,\r\n                comment : true\r\n            })\r\n        }\r\n    \r\n    }\r\n\r\n    onType = (event) => {\r\n        event.preventDefault();\r\n        // console.log(event.target.value)\r\n        // console.log(this)\r\n        this.setState({\r\n            value : event.target.value\r\n        })\r\n    }\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"header\">\r\n                \r\n                    <div className='heading'>\r\n                    <h3>Movie Search</h3>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className='form'>\r\n                <form onSubmit={this.handleSubmit}>\r\n                <label>Movie Name : </label>\r\n                <input type='text' className='search' onChange={this.onType} value={this.state.value} ></input>\r\n                <button type='submit'>Search</button>\r\n                </form>\r\n                </div>\r\n                {this.state.status ? <ShowMovieDetails \r\n                onclickImg ={false} \r\n                movieDet ={this.state.response} \r\n                /> : ''}\r\n                {this.state.comment ? \"Check the Name Once again !!! \" : ''}\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Movie from './components/Movie'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Movie/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}