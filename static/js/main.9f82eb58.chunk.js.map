{"version":3,"sources":["components/ShowMovieDetails.js","components/Movie.js","serviceWorker.js","index.js"],"names":["ShowMovieDetails","props","onimgClick","console","log","state","click","a","featureArray","length","setState","alert","response","movieDet","bind","myRef","React","createRef","nextProps","nextState","timeLog","this","Title","prevProps","prevState","window","scrollTo","current","offsetTop","imgStyle","Poster","className","onClick","style","src","alt","ref","map","arr","i","key","Component","Movie","onType","event","value","target","checkBox","allboxes","stat","checkBoxStatus","checkarr","rend","checked","push","filter","s","box","status","loading","comment","checkBoxState","error","handleSubmit","preventDefault","url","movie","axios","get","then","rjson","data","Response","catch","showmov","Fragment","onSubmit","type","onChange","id","e","name","htmlFor","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9f82eb58.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n\r\nexport default class ShowMovieDetails extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            click : false,\r\n            response : this.props.movieDet\r\n        }\r\n        this.onimgClick = this.onimgClick.bind(this);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Component did mount!\");\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, state) {\r\n        console.log(\"Component will receive props\", nextProps,state);\r\n        if(state.response.Title === nextProps.movieDet.Title) {\r\n            console.log(false)\r\n            if(nextProps.featureArray.length < 1) {\r\n                return{\r\n                    click : false\r\n                }\r\n            }\r\n            return null\r\n        } else if (state.response.Title !== nextProps.movieDet.Title) {\r\n            console.log(\"change in title\", state.response.Title,nextProps.movieDet.Title)\r\n            return {\r\n                click : false,\r\n                response : nextProps.movieDet\r\n            }\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps,nextState) {\r\n        console.timeLog(\"should Component Update\",nextProps,nextState)\r\n        if(this.state.response.Title === nextProps.movieDet.Title && this.state.click === nextState.click && this.props.featureArray.length === nextProps.featureArray.length ) {\r\n            // console.log(false)\r\n            return false\r\n        }\r\n            \r\n        return true\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"Component did update\", prevProps, prevState);\r\n        if(this.state.click) {\r\n            window.scrollTo(0, this.myRef.current.offsetTop)\r\n            console.log(this.myRef.current.offsetTop)\r\n        }\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"Component will unmount\");\r\n    }\r\n\r\n    onimgClick = () => {\r\n        console.log(\"click\",this.state.click)\r\n        let a = [...this.props.featureArray]\r\n        console.log(\"featureArray length : \", a.length)\r\n        if (a.length > 0) { \r\n        this.setState({\r\n            click : !this.state.click\r\n        })\r\n        }\r\n        else {\r\n            alert(\"Select any of the CheckBox to view the content\")\r\n        }\r\n        console.log(\"click\",this.state.click)\r\n    }\r\n\r\n    // scrollToMyRef = () => window.scrollTo(0, this.myRef.current.offsetTop)\r\n\r\n    \r\n    \r\n    render() {\r\n        \r\n        \r\n        let clickStatus = this.state.click\r\n        let imgStyle = {};\r\n        if (clickStatus) {\r\n            imgStyle[\"box-shadow\"] = \"10px 10px 10px grey\"\r\n            imgStyle[\"border\"] = \"0px\"\r\n\r\n        }\r\n        \r\n        console.log(this.props.movieDet.Poster)\r\n        return (\r\n            <div className=\"MovieDetails\" >\r\n\r\n                <div className=\"poster\">               \r\n                <img onClick={this.onimgClick} style={imgStyle} className=\"image\" src={this.props.movieDet.Poster} alt=\"poster\" />\r\n                </div>\r\n\r\n                {this.state.click &&\r\n                <div className=\"Details\" ref= {this.myRef} >\r\n                    <ul>\r\n                    {this.props.featureArray.map((arr,i) => {\r\n                        return <li key={i}><b>{arr} : </b><i>{this.props.movieDet[arr]}</i></li>\r\n                    } )}\r\n                    </ul>\r\n                </div>\r\n                }\r\n\r\n                {/* <ul>\r\n                    <li><b>Title : </b><i>{this.props.movieDet.Title}</i></li>\r\n                    <li><b>Year : </b><i>{this.props.movieDet.Year}</i></li>\r\n                    <li><b>Genre : </b><i>{this.props.movieDet.Genre}</i></li>\r\n                    <li><b>IMDB: </b><i>{this.props.movieDet.imdbRating}</i></li>\r\n                    <li><b>Cast : </b><i>{this.props.movieDet.Actors}</i></li>\r\n                    <li><b>Plot : </b><i>{this.props.movieDet.Plot}</i></li>\r\n                </ul> */}\r\n                \r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import ShowMovieDetails from './ShowMovieDetails'\r\nimport React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default class Movie extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            value : '',\r\n            status : false,\r\n            loading : '',\r\n            response : {},\r\n            comment : false,\r\n            checkarr : [\"Title\",\"Year\",\"Genre\",\"imdbRating\",\"Actors\",\"Plot\"],\r\n            checkBoxState: [],\r\n            checkBoxStatus: [true,true,true,true,true,true],\r\n            error:''\r\n            \r\n            // checkarr : [\"Title\",\"Year\",\"Genre\",\"imdbRating\",\"Actors\",\"Plot\"]\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"component Did Update Parent\")\r\n\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        this.setState({status :true,\r\n            loading:\"Loading ...\"})\r\n        event.preventDefault();\r\n        const url = \"https://www.omdbapi.com/?i=tt3896198&apikey=41425427&t=\"\r\n        const movie = this.state.value\r\n        console.log(url+movie)\r\n        axios.get(url+movie)\r\n            .then(a => {\r\n            // const a = await fetch(url+movie)\r\n            console.log(a)\r\n            const rjson = a.data\r\n            console.log(rjson)\r\n            console.log(rjson.Response)\r\n            if (rjson.Response === \"True\"){\r\n                this.setState({\r\n                    status : true,\r\n                    response : rjson,\r\n                    comment : false,\r\n                    loading:'',\r\n                    error: ''\r\n                    // value : ''\r\n                })            \r\n            } else if (rjson.Response === \"False\") {\r\n                this.setState({\r\n                    status : false,\r\n                    comment : true,\r\n                    error: ''\r\n                })\r\n            }})\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.setState({error: \"Something Went Wrong\"});\r\n            });\r\n    \r\n    }\r\n\r\n    onType = (event) => {\r\n        // console.log(event.target.value)\r\n        // console.log(this)\r\n        this.setState({\r\n            value : event.target.value\r\n        })\r\n    }\r\n\r\n    checkBox = (event,i) => {\r\n        let allboxes = [\"Title\",\"Year\",\"Genre\",\"imdbRating\",\"Actors\",\"Plot\"]\r\n        // console.log(\"i : \",i)\r\n        let stat = [...this.state.checkBoxStatus]\r\n        stat[i] = !stat[i]\r\n        let a = [...this.state.checkarr]\r\n        \r\n        // let stat = [...this.state.checkBoxStatus]\r\n        // stat[i] = !stat[i]\r\n        let rend = false\r\n        // let count = 0\r\n        console.log(a)\r\n        console.log(event.target.value)\r\n        if(event.target.checked === true) {\r\n            a.push(event.target.value)\r\n            console.log(a)\r\n        }else if(event.target.checked === false) {\r\n            a= a.filter((s) => { return (s !== event.target.value)})\r\n            console.log(a)\r\n        }\r\n        allboxes = allboxes.filter(box => {\r\n            for(let i =0;i<a.length ;i++){\r\n                if(box === a[i])\r\n                return true\r\n            }\r\n            return false\r\n        })\r\n        console.log(\"ALL boxes :\",allboxes)\r\n        \r\n        if(this.state.checkarr.length !== a.length) {\r\n            rend = true\r\n        }  \r\n            //else if(this.state.checkarr.length === a.length) {\r\n        //     for(let i=0 ; i<this.state.checkarr.length; i++) {\r\n        //         if(a[i] === this.state.checkarr[i]){\r\n        //             count = count + 1\r\n        //         }else {\r\n        //             count = count - 1\r\n        //         }\r\n        //     }\r\n        //     if (count === a.length){\r\n        //         rend = false\r\n        //     } else { rend = true}\r\n        // }\r\n\r\n        if(rend === true){\r\n            this.setState({\r\n                checkarr: allboxes,\r\n                checkBoxStatus: stat\r\n                // checkBoxStatus: stat\r\n            })\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    render() {\r\n        let showmov;\r\n        let style={\r\n            \"display\": \"flex\",\r\n            \"justifyContent\": \"center\"\r\n        }\r\n        if(this.state.loading === 'Loading ...') {\r\n            showmov = <div className=\"loader\">Loading...</div>\r\n        } else {\r\n            showmov = <ShowMovieDetails \r\n            featureArray = {this.state.checkarr}\r\n            movieDet ={this.state.response} \r\n            />\r\n        }\r\n\r\n        if(this.state.error) {\r\n            showmov = <h3 style={style}>{this.state.error}</h3>\r\n        }\r\n        \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"header\">\r\n                \r\n                    <div className='heading'>\r\n                    <h3>Movie Search</h3>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"form\" >\r\n                <form onSubmit={this.handleSubmit}>\r\n                <div className='search_bar'>\r\n                <label>Movie Name : </label>\r\n                <input type='text' className='search' onChange={this.onType} value={this.state.value} ></input>\r\n                </div>\r\n\r\n                <div className=\"checkboxes\">\r\n                <input type=\"checkbox\" id=\"Title\" onChange={(e) => this.checkBox(e,0)} checked={this.state.checkBoxStatus[0]} name=\"box1\" value=\"Title\"/>\r\n                <label htmlFor=\"Title\">Title</label>\r\n                <input type=\"checkbox\" id=\"Year\" onChange={(e) => this.checkBox(e,1)} checked={this.state.checkBoxStatus[1]} name=\"box1\" value=\"Year\"/>\r\n                <label htmlFor=\"Year\">Year</label>\r\n                <input type=\"checkbox\" id=\"Genre\" onChange={(e) => this.checkBox(e,2)} checked={this.state.checkBoxStatus[2]} name=\"box1\" value=\"Genre\"/>\r\n                <label htmlFor=\"Genre\">Genre</label>\r\n                <input type=\"checkbox\" id=\"imdbRating\" onChange={(e) => this.checkBox(e,3)} checked={this.state.checkBoxStatus[3]} name=\"box1\" value=\"imdbRating\"/>\r\n                <label htmlFor=\"imdbRating\">IMDB</label>\r\n                <input type=\"checkbox\" id=\"Actors\" onChange={(e) => this.checkBox(e,4)} checked={this.state.checkBoxStatus[4]} name=\"box1\" value=\"Actors\"/>\r\n                <label htmlFor=\"Actors\">Actors</label>\r\n                <input type=\"checkbox\" id=\"Plot\" onChange={(e) => this.checkBox(e,5)} checked={this.state.checkBoxStatus[5]} name=\"box1\" value=\"Plot\"/>\r\n                <label htmlFor=\"Plot\">Plot</label>\r\n                </div>\r\n\r\n                <button type='submit'>Search</button>\r\n                </form>\r\n                </div>\r\n                \r\n                {this.state.status ? showmov : ''}\r\n                {this.state.comment ? <h3 style={style}>\"OOPS!! Check the Name Once again...\"</h3> : ''}\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Movie from './components/Movie'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Movie/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}